// src/modules/transactions/models/transaction.model.ts
import mongoose, { Schema, Document } from 'mongoose';
import { TransactionType, PaymentMethod, STABLECOINS } from '../../../shared/types/transaction.types';

export interface ITransaction extends Document {
  user: string;               // ID dell'utente
  cryptoSymbol: string;       // Simbolo della criptovaluta (es. BTC)
  type: string;               // Tipo: acquisto, vendita, airdrop o farming
  quantity: number;           // Quantità acquistata/venduta
  pricePerUnit: number;       // Prezzo per unità al momento della transazione
  totalAmount: number;        // Importo totale della transazione
  fees?: number;              // Commissioni (opzionale)
  notes?: string;             // Note aggiuntive
  date: Date;                 // Data della transazione
  category?: string;          // Categoria (es. alto rischio, stabile, lungo termine)
  
  // Campi per gestire la fonte dei fondi
  paymentMethod?: string;     // Metodo di pagamento (bonifico, carta, crypto, ecc.)
  paymentCurrency?: string;   // Valuta di pagamento (EUR, USD, USDT, USDC, ecc.)
  
  // Flag per transazioni generate automaticamente (per stablecoin)
  isAutoGenerated?: boolean;  // Flag per transazioni generate dal sistema
}

const TransactionSchema: Schema = new Schema({
  user: {
    type: String,
    required: true,
    default: 'default_user'  // Temporaneo, finché non implementiamo l'autenticazione
  },
  cryptoSymbol: {
    type: String,
    required: true,
    uppercase: true,
    trim: true
  },
  type: {
    type: String,
    enum: Object.values(TransactionType),
    required: true
  },
  quantity: {
    type: Number,
    required: true,
    min: 0
  },
  pricePerUnit: {
    type: Number,
    required: true,
    min: 0
  },
  totalAmount: {
    type: Number,
    required: true,
    min: 0
  },
  fees: {
    type: Number,
    default: 0,
    min: 0
  },
  notes: {
    type: String,
    maxlength: 500
  },
  date: {
    type: Date,
    default: Date.now
  },
  category: {
    type: String,
    trim: true
  },
  
  // Campi per gestire la fonte dei fondi
  paymentMethod: {
    type: String,
    enum: Object.values(PaymentMethod),
    default: PaymentMethod.BANK_TRANSFER
  },
  paymentCurrency: {
    type: String,
    default: 'EUR',
    uppercase: true,
    trim: true
  },
  
  // Flag per transazioni generate automaticamente
  isAutoGenerated: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Middleware pre-save per gestire correttamente i tipi di transazione
TransactionSchema.pre('save', function(this: ITransaction, next) {
  // Normalizza i valori
  this.cryptoSymbol = this.cryptoSymbol.trim().toUpperCase();
  if (this.paymentCurrency) {
    this.paymentCurrency = this.paymentCurrency.trim().toUpperCase();
  }
  
  // 1. Gestione dei prezzi e importi per transazioni a costo zero
  if (this.type === TransactionType.AIRDROP || this.type === TransactionType.FARMING) {
    this.pricePerUnit = 0;
    this.totalAmount = 0;
  } 
  // 2. Calcolo automatico dell'importo totale per transazioni con prezzo
  else if (!this.totalAmount && this.quantity && this.pricePerUnit) {
    this.totalAmount = Number(this.quantity) * Number(this.pricePerUnit);
  }
  
  // 3. Gestione dei campi per metodo di pagamento in base al tipo di transazione
  
  // 3.1 Per airdrop: nessun metodo di pagamento rilevante
  if (this.type === TransactionType.AIRDROP) {
    this.paymentMethod = undefined;
    this.paymentCurrency = undefined;
  }
  // 3.2 Per farming: manteniamo metodo e valuta per tracciare la crypto di origine
  else if (this.type === TransactionType.FARMING) {
    // Imposta sempre il metodo di pagamento a CRYPTO per il farming
    this.paymentMethod = PaymentMethod.CRYPTO;
    
    // Se manca la valuta di origine, usa la stessa della crypto guadagnata
    if (!this.paymentCurrency) {
      this.paymentCurrency = this.cryptoSymbol;
    }
  }
  // 3.3 Per vendite: assicuriamo che abbiano metodo e valuta
  else if (this.type === TransactionType.SELL) {
    if (!this.paymentMethod) {
      this.paymentMethod = PaymentMethod.CRYPTO;
    }
    
    if (!this.paymentCurrency) {
      this.paymentCurrency = 'USDT'; // Default per le vendite
    }
  }
  
  // 3.4 Per tutti i tipi: assicuriamo coerenza tra metodo e valuta
  if (this.paymentMethod === PaymentMethod.CRYPTO && !this.paymentCurrency) {
    this.paymentCurrency = 'USDT'; // Default per pagamenti crypto
  } else if (this.paymentMethod !== PaymentMethod.CRYPTO && !this.paymentCurrency) {
    this.paymentCurrency = 'USD'; // Default per pagamenti non-crypto
  }
  
  next();
});

export const Transaction = mongoose.model<ITransaction>('Transaction', TransactionSchema);