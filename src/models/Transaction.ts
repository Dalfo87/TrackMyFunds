// src/models/Transaction.ts

import mongoose, { Schema, Document } from 'mongoose';

// Definiamo i tipi di transazione possibili
export enum TransactionType {
  BUY = 'buy',
  SELL = 'sell',
  AIRDROP = 'airdrop',
  FARMING = 'farming'  // Nuovo tipo di transazione
}

// Definiamo i metodi di pagamento possibili
export enum PaymentMethod {
  BANK_TRANSFER = 'bank_transfer',
  CREDIT_CARD = 'credit_card',
  DEBIT_CARD = 'debit_card',
  CRYPTO = 'crypto',
  OTHER = 'other'
}

// Lista delle stablecoin riconosciute dal sistema
export const STABLECOINS = ['USDT', 'USDC', 'DAI', 'BUSD', 'TUSD', 'USDP', 'GUSD', 'FRAX'];

// Interfaccia per il documento Transaction
export interface ITransaction extends Document {
  user: string;               // ID dell'utente (per uso futuro con autenticazione)
  cryptoSymbol: string;       // Simbolo della criptovaluta (es. BTC)
  type: TransactionType;      // Tipo: acquisto, vendita, airdrop o farming
  quantity: number;           // Quantità acquistata/venduta
  pricePerUnit: number;       // Prezzo per unità al momento della transazione
  totalAmount: number;        // Importo totale della transazione
  fees?: number;              // Commissioni (opzionale)
  notes?: string;             // Note aggiuntive
  date: Date;                 // Data della transazione
  category?: string;          // Categoria (es. alto rischio, stabile, lungo termine)
  
  // Campi per gestire la fonte dei fondi
  paymentMethod?: PaymentMethod; // Metodo di pagamento (bonifico, carta, crypto, ecc.)
  paymentCurrency?: string;      // Valuta di pagamento (EUR, USD, USDT, USDC, ecc.)
  
  // Flag per transazioni generate automaticamente (per stablecoin)
  isAutoGenerated?: boolean;     // Flag per transazioni generate dal sistema
}

const TransactionSchema: Schema = new Schema({
  user: {
    type: String,
    required: true,
    default: 'default_user'  // Temporaneo, finché non implementiamo l'autenticazione
  },
  cryptoSymbol: {
    type: String,
    required: true,
    uppercase: true,
    trim: true
  },
  type: {
    type: String,
    enum: Object.values(TransactionType),
    required: true
  },
  quantity: {
    type: Number,
    required: true,
    min: 0
  },
  pricePerUnit: {
    type: Number,
    required: true,
    min: 0
  },
  totalAmount: {
    type: Number,
    required: true,
    min: 0
  },
  fees: {
    type: Number,
    default: 0,
    min: 0
  },
  notes: {
    type: String,
    maxlength: 500
  },
  date: {
    type: Date,
    default: Date.now
  },
  category: {
    type: String,
    trim: true
  },
  
  // Campi per gestire la fonte dei fondi
  paymentMethod: {
    type: String,
    enum: Object.values(PaymentMethod),
    default: PaymentMethod.BANK_TRANSFER
  },
  paymentCurrency: {
    type: String,
    default: 'EUR',
    uppercase: true,
    trim: true
  },
  
  // Flag per transazioni generate automaticamente
  isAutoGenerated: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});

// Middleware pre-save per calcolare automaticamente il totale
TransactionSchema.pre('save', function(next) {
  // Se totalAmount non è specificato e type non è AIRDROP o FARMING, lo calcoliamo
  if (!this.totalAmount && this.quantity && this.pricePerUnit && 
      this.type !== TransactionType.AIRDROP && this.type !== TransactionType.FARMING) {
    this.totalAmount = Number(this.quantity) * Number(this.pricePerUnit);
  }
  
  // Per gli airdrop e farming, impostiamo automaticamente pricePerUnit e totalAmount a 0
  if (this.type === TransactionType.AIRDROP || this.type === TransactionType.FARMING) {
    this.pricePerUnit = 0;
    this.totalAmount = 0;
    
    // Per gli airdrop e farming, non è rilevante il metodo di pagamento
    this.paymentMethod = undefined;
    this.paymentCurrency = undefined;
  }
  
  // Ci assicuriamo che le vendite abbiano sempre un metodo di pagamento e una valuta
  if (this.type === TransactionType.SELL) {
    // Se manca il metodo di pagamento, imposta quello di default
    if (!this.paymentMethod) {
      this.paymentMethod = PaymentMethod.CRYPTO;
    }
    
    // Se manca la valuta, imposta quella di default
    if (!this.paymentCurrency) {
      this.paymentCurrency = 'USDT';
    }
  }
  
  // Se il metodo di pagamento è crypto, assicuriamoci che sia specificata una valuta crypto
  if (this.paymentMethod === PaymentMethod.CRYPTO && !this.paymentCurrency) {
    this.paymentCurrency = 'USDT'; // Default a USDT se non specificato
  }

  // Se il metodo di pagamento non è crypto, impostiamo la valuta di default se non specificata
  if (this.paymentMethod !== PaymentMethod.CRYPTO && !this.paymentCurrency) {
    this.paymentCurrency = 'USD';
  }
  
  console.log(`Pre-save transaction: Type=${this.type}, Symbol=${this.cryptoSymbol}, PaymentMethod=${this.paymentMethod}, PaymentCurrency=${this.paymentCurrency}`);
  next();
});

export default mongoose.model<ITransaction>('Transaction', TransactionSchema);